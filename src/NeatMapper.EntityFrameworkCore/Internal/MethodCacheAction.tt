<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
// This code was generated by a tool (MethodCache.tt).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Concurrent;
using System.Reflection;

namespace NeatMapper.EntityFrameworkCore {
<#
	int parameters = 1;

	for(var i = 0; i <= parameters; i++){
		var argTypes = string.Join(", ", Enumerable.Range(0, i).Select(n => "TArg" + n));
		var argNames = string.Join(", ", Enumerable.Range(0, i).Select(n => "arg" + n));
#>
	internal sealed class MethodCacheAction<TKey<#= (!string.IsNullOrEmpty(argTypes) ? ", " + argTypes : "") #>> 
#if NETCOREAPP3_1 || NET5_0_OR_GREATER
		where TKey : notnull
#endif
		{
		private readonly ConcurrentDictionary<TKey, Action<#= (!string.IsNullOrEmpty(argTypes) ? "<" + argTypes + ">" : "") #>> _cache =
			new ConcurrentDictionary<TKey, Action<#= (!string.IsNullOrEmpty(argTypes) ? "<" + argTypes + ">" : "") #>>();

		private readonly Func<TKey, MethodInfo> _methodSelector;
		private readonly Func<<#= (!string.IsNullOrEmpty(argTypes) ? argTypes + ", " : "") #>TKey> _keySelector;
		private readonly string[] _parameterNames;


		public MethodCacheAction(Func<<#= (!string.IsNullOrEmpty(argTypes) ? argTypes + ", " : "") #>TKey> keySelector, Func<TKey, MethodInfo> methodSelector, params string[] parameterNames) {
			_methodSelector = methodSelector;
			_keySelector = keySelector;
			_parameterNames = parameterNames;
		}

		public void Invoke(<#= string.Join(", ", Enumerable.Range(0, i).Select(n => "TArg" + n + " arg" + n)) #>) {
			_cache.GetOrAdd(_keySelector.Invoke(<#= argNames #>), k =>
				NeatMapper.TypeUtils.MethodToDelegate<Action<#= (!string.IsNullOrEmpty(argTypes) ? "<" + argTypes + ">" : "") #>>(_methodSelector.Invoke(k), _parameterNames))
					.Invoke(<#= argNames #>);
		}
	}

<#
}
#>
}